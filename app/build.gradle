apply plugin: 'com.android.application'
repositories {
    flatDir {
        dirs 'libs'
    }
}
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        def name = (versionProps['VERSION_NAME'].toInteger() + 1).toString()
        def first = versionProps['VERSION_FIRST'].toInteger()
        def second = versionProps['VERSION_SECOND'].toInteger()
        if (name.toInteger() > 9999) {
            second += 1
            name = '0000'
        }
        if (second > 9) {
            first += 1
            second = 0
        }
        versionProps['VERSION_CODE'] = code.toString()
        versionProps['VERSION_NAME'] = name
        versionProps['VERSION_FIRST'] = first.toString()
        versionProps['VERSION_SECOND'] = second.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        name = first + '.' + second + '.' + name
        defaultConfig {
            applicationId "com.matrix.myapplication"
            minSdkVersion 19
            targetSdkVersion 28
            versionCode code
            versionName name
            multiDexEnabled true
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    buildTypes {
        release {
            minifyEnabled false //开启混淆?
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "TestList_${defaultConfig.versionName}.apk"

//            def date = new Date()
//            def formattedDate = date.format('yyyyMMdd')

        }
    }

    useLibrary 'org.apache.http.legacy'
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src']
        }

        // Move the tests to tests/java, tests/res, etc...
//        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    splits {// INSTALL_FAILED_NO_MATCHING_ABIS
        abi {
            enable true //分包会导致报错 Several variant outputs are configured to use the same file name
            reset()
            //include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            include "x86"
            universalApk false
        }
    }
}
//sourceSets {
//    main {
//        jniLibs.srcDirs = ['libs']
//    }
//}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0-alpha1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    // implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    compile fileTree(include: ['*.arr'], dir: 'libs')
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
    //noinspection GradleCompatible
    //implementation 'com.android.support:appcompat-v7:28.+'
    testImplementation 'junit:junit:4.12'
    implementation 'com.zhy:okhttputils:2.6.2'
    implementation 'cjt.library.wheel:camera:1.1.9'
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    //implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation files('libs/sun.misc.BASE64Decoder.jar')
    implementation files('libs/fastjson-1.1.39.jar')
    implementation 'com.google.code.gson:gson:2.8.5'
    //implementation files('libs/library_pulltorefresh.jar')
    //implementation project(path: ':library-PullToRefresh')
    implementation 'me.imid.swipebacklayout.lib:library:1.1.0'
    implementation 'com.google.android:flexbox:1.1.0'
    implementation 'org.apache.httpcomponents:httpmime:4.1'
//    compile(name: 'lib.5plus.base-release', ext: 'aar')
    implementation 'com.sunfusheng:marqueeview:1.3.3'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha04'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.test.ext:junit:1.1.1-alpha04'

    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation'com.squareup.okhttp3:logging-interceptor:3.4.1'
}
